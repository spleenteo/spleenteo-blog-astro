---
import { graphql } from '~/lib/datocms/graphql';
import Layout from '../layouts/Layout.astro';
import { TagFragment, responsiveImageFragment } from '~/lib/datocms/commonFragments';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { StructuredText } from '@datocms/astro';

import { HeadingWithAnchorLink } from '~/components/HeadingWithAnchorLink';

import { isDraftModeEnabled } from '~/lib/draftMode';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';

import { PageInline } from '~/components/inlineRecord/PageInline';
import { PageInlineFragment } from '~/components/inlineRecord/PageInline/fragments';

import { PageLink } from '~/components/linkToRecord/PageLink';
import { PageLinkFragment } from '~/components/linkToRecord/PageLink/fragments';

import { VideoBlock } from '~/components/blocks/VideoBlock';
import { VideoBlockFragment } from '~/components/blocks/VideoBlock/fragments';

import { ImageBlock } from '~/components/blocks/ImageBlock';
import { ImageBlockFragment } from '~/components/blocks/ImageBlock/fragments';

import { ImageGalleryBlock } from '~/components/blocks/ImageGalleryBlock';
import { ImageGalleryBlockFragment } from '~/components/blocks/ImageGalleryBlock/fragments';
import { ResponsiveImageFragment } from '~/components/ResponsiveImage/fragments';

/**
 * The GraphQL query that will be executed for this route to generate the page
 * content and metadata.
 *
 * Thanks to gql.tada, the result will be fully typed!
 */
 const query = graphql(
  /* GraphQL */ `
  query BasicPageQuery {
    blog {
      title
      subtitle
      _firstPublishedAt

      _seoMetaTags {
        ...TagFragment
      }
    }
    allPosts(orderBy: date_DESC) {
      title
      slug
      excerpt
      date
      id
      coverImage {
        responsiveImage(imgixParams: {fm: jpg, fit: crop, w: 2000, h: 1000 }) {
          ...ResponsiveImageFragment
        }
      }
      category{
        name
        slug
        id
      }
      tags{
        name
        slug
        id
      }
    }
  }
  `,
  [
    TagFragment,
    ResponsiveImageFragment,
    // ImageGalleryBlockFragment,
    // VideoBlockFragment,
    // PageLinkFragment,
    // PageInlineFragment,
  ],
);

// const query = graphql(
//   /* GraphQL */ `
//     query BasicPageQuery {
//       blog {
//         _seoMetaTags {
//           ...TagFragment
//         }
//         title
//         _firstPublishedAt
//         structuredText {
//           value
//           blocks {
//             ... on RecordInterface {
//               id
//               __typename
//             }
//             ... on ImageBlockRecord {
//               ...ImageBlockFragment
//             }
//             ... on ImageGalleryBlockRecord {
//               ...ImageGalleryBlockFragment
//             }
//             ... on VideoBlockRecord {
//               ...VideoBlockFragment
//             }
//           }
//           links {
//             ... on RecordInterface {
//               id
//               __typename
//             }
//             ...PageLinkFragment
//             ...PageInlineFragment
//           }
//         }
//       }
//     }
//   `,
//   [
//     TagFragment,
//     ImageBlockFragment,
//     ImageGalleryBlockFragment,
//     VideoBlockFragment,
//     PageLinkFragment,
//     PageInlineFragment,
//   ],
// );

const draftModeEnabled = isDraftModeEnabled(Astro.cookies);
const { blog } = await executeQuery(query, { includeDrafts: draftModeEnabled });

if (!blog) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}
---

<Layout additionalSeo={blog._seoMetaTags}>
  <h1>{blog.title}</h1>
  <h2>{blog.subtitle}</h2>
  <footer>Published at {blog._firstPublishedAt}</footer>

  <DraftModeQueryListener query={query} />
</Layout>
