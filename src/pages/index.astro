---
import { graphql } from '~/lib/datocms/graphql';
import Layout from '../layouts/Layout.astro';
import { TagFragment, responsiveImageFragment } from '~/lib/datocms/commonFragments';
import { executeQuery } from '~/lib/datocms/executeQuery';
import activeCategories from '~/lib/activeCategories';
import HeroPost from '../components/HeroPost.astro';

import { StructuredText } from '@datocms/astro';

import { HeadingWithAnchorLink } from '~/components/HeadingWithAnchorLink';

import { isDraftModeEnabled } from '~/lib/draftMode';
import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';

import { PageInline } from '~/components/inlineRecord/PageInline';
import { PageInlineFragment } from '~/components/inlineRecord/PageInline/fragments';

import { PageLink } from '~/components/linkToRecord/PageLink';
import { PageLinkFragment } from '~/components/linkToRecord/PageLink/fragments';

import { VideoBlock } from '~/components/blocks/VideoBlock';
import { VideoBlockFragment } from '~/components/blocks/VideoBlock/fragments';

import { ImageBlock } from '~/components/blocks/ImageBlock';
import { ImageBlockFragment } from '~/components/blocks/ImageBlock/fragments';

import { ImageGalleryBlock } from '~/components/blocks/ImageGalleryBlock';
import { ImageGalleryBlockFragment } from '~/components/blocks/ImageGalleryBlock/fragments';
import { ResponsiveImageFragment } from '~/components/ResponsiveImage/fragments';

/**
 * The GraphQL query that will be executed for this route to generate the page
 * content and metadata.
 *
 * Thanks to gql.tada, the result will be fully typed!
 */
const query = graphql(
  /* GraphQL */ `
    query BasicPageQuery {
      blog {
        title
        subtitle
        _firstPublishedAt

        _seoMetaTags {
          ...TagFragment
        }
      }
      allPosts(orderBy: date_DESC) {
        title
        slug
        excerpt
        date
        id
        coverImage {
          responsiveImage(imgixParams: { fm: jpg, fit: crop, w: 2000, h: 1000 }) {
            ...ResponsiveImageFragment
          }
        }
        category {
          name
          slug
          id
        }
        tags {
          name
          slug
          id
        }
      }
    }
  `,
  [
    TagFragment,
    ResponsiveImageFragment,
    // ImageGalleryBlockFragment,
    // VideoBlockFragment,
    // PageLinkFragment,
    // PageInlineFragment,
  ],
);

const draftModeEnabled = isDraftModeEnabled(Astro.cookies);
const { blog, allPosts } = await executeQuery(query, { includeDrafts: draftModeEnabled });

const categories = await activeCategories();
const heroPost = allPosts[0];
const higlights = [allPosts[1], allPosts[2]];



if (!blog) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}
---

<Layout additionalSeo={blog._seoMetaTags}>
  <ul>
    {categories.map((category) => <li>{category.name}</li>)}
  </ul>
  <hr/>

  {heroPost && (
    <HeroPost
      title={heroPost.title}
      coverImage={heroPost.coverImage}
      date={heroPost.date}
      slug={heroPost.slug}
      excerpt={heroPost.excerpt}
      category={heroPost.category}
      tags={heroPost.tags}
    />
  )}


  <ul>
    {allPosts.map((post) => <li>{post.title}</li>)}
  </ul>

  <footer>Published at {blog._firstPublishedAt}</footer>

  <h1 class="text-6xl font-bold">{blog.title}</h1>
  <h2>{blog.subtitle}</h2>
  <DraftModeQueryListener query={query} />
</Layout>
