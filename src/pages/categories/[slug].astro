---
import Layout from '~/layouts/Layout.astro';
import { graphql } from '~/lib/datocms/graphql';
import { executeQuery } from '~/lib/datocms/executeQuery';
import PostGrid from '~/components/PostGrid.astro';
import PostTitle from '~/components/PostTitle.astro';
import { isDraftModeEnabled } from '~/lib/draftMode';

import { TagFragment } from '~/lib/datocms/commonFragments';
import { ResponsiveImageFragment } from '~/components/ResponsiveImage/fragments';

import createDOMPurify from 'dompurify';
import { JSDOM } from 'jsdom';

const window = new JSDOM('').window;
const DOMPurify = createDOMPurify(window);

// Ottieni lo slug dai parametri
const { slug } = Astro.params || {};
if (!slug) {
  return new Response(null, {
    status: 400,
    statusText: 'Bad Request',
  });
}
const draftModeEnabled = isDraftModeEnabled(Astro.cookies);

// Definisci la query utilizzando la relazione inversa
const query = graphql(
  /* GraphQL */ `
    query CategoryBySlug($slug: String!) {
      site: _site {
        favicon: faviconMetaTags {
          ...TagFragment
        }
      }
      category(filter: { slug: { eq: $slug } }) {
        name
        description
        slug
        seo: _seoMetaTags {
          ...TagFragment
        }
        posts: _allReferencingPosts(orderBy: date_DESC) {
          id
          title
          excerpt
          slug
          date
          category {
            name
            slug
          }
          tags {
            name
            slug
            id
          }
          coverImage {
            responsiveImage(imgixParams: { fm: jpg, fit: crop, w: 2000, h: 1000 }) {
              ...ResponsiveImageFragment
            }
          }
        }
      }
    }
  `,
  [TagFragment, ResponsiveImageFragment],
);

type Category = {
  name: string;
  description: string;
  slug: string;
  seo: any[];
  posts: {
    id: string;
    title: string;
    excerpt: string;
    slug: string;
    date: string;
    category: {
      name: string;
      slug: string;
    };
    tags: {
      name: string;
      slug: string;
      id: string;
    }[];
    coverImage: {
      responsiveImage: any;
    };
  }[];
};

const result = await executeQuery(query, {
  variables: { slug },
  includeDrafts: draftModeEnabled,
});
const { site, category } = result as { site: any; category: Category | null };

// Se la categoria non esiste, restituisci una pagina 404
if (!category) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}

// Estrai i post dalla relazione inversa
const posts = category.posts;

// Verifica se ci sono post
if (!posts || posts.length === 0) {
  console.log('Nessun post trovato per questa categoria.');
}

// Combina i meta tag per il SEO
const metaTags = [...category.seo, ...site.favicon];

// Sanitizza la descrizione se necessario
const sanitizedDescription = category.description ? DOMPurify.sanitize(category.description) : null;
---

<Layout additionalSeo={metaTags}>
  <div class="container mx-auto px-4">
    <PostTitle title={category.name} />
    {
      sanitizedDescription && (
        <div
          class="mb-10 md:text-1xl lg:text-2xl md:leading-relaxed lg:w-2/3 xl:w-1/2"
          set:html={sanitizedDescription}
        />
      )
    }
    {
      posts && posts.length > 0 ? (
        <PostGrid posts={posts} />
      ) : (
        <p>Nessun post disponibile per questa categoria.</p>
      )
    }
  </div>
</Layout>
