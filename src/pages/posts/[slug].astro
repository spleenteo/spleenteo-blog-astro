---
import Layout from '~/layouts/Layout.astro';

import { graphql } from '~/lib/datocms/graphql';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { isDraftModeEnabled } from '~/lib/draftMode';
import { TagFragment } from '~/lib/datocms/commonFragments';
import { ResponsiveImageFragment } from '~/components/ResponsiveImage/fragments';

import PostHeader from '~/components/PostHeader.astro';
import PostBody from '~/components/PostBody.astro';
import PostMeta from '~/components/PostMeta.astro';
import CategoryAbstract from '~/components/CategoryAbstract.astro';

import { DraftModeQueryListener } from '~/components/DraftModeQueryListener';

import { StructuredText } from '@datocms/astro';
import { HeadingWithAnchorLink } from '~/components/HeadingWithAnchorLink';

import { PageInline } from '~/components/inlineRecord/PageInline';
import { PageInlineFragment } from '~/components/inlineRecord/PageInline/fragments';

import { PageLink } from '~/components/linkToRecord/PageLink';
import { PageLinkFragment } from '~/components/linkToRecord/PageLink/fragments';

import { VideoBlock } from '~/components/blocks/VideoBlock';
import { VideoBlockFragment } from '~/components/blocks/VideoBlock/fragments';

import { ImageBlock } from '~/components/blocks/ImageBlock';
import { ImageBlockFragment } from '~/components/blocks/ImageBlock/fragments';

import { ImageGalleryBlock } from '~/components/blocks/ImageGalleryBlock';
import { ImageGalleryBlockFragment } from '~/components/blocks/ImageGalleryBlock/fragments';

import { MetaTags } from '@datocms/astro';
import MoreStories from '~/components/MoreStories.astro';

import createDOMPurify from 'dompurify';
import { JSDOM } from 'jsdom';

const window = new JSDOM('').window;
const DOMPurify = createDOMPurify(window);

// // Define the interface for static paths
// interface StaticPath {
//   params: {
//     slug: string;
//   };
// }
const { slug } = Astro.params;

// Function to generate static paths
export async function getStaticPaths(): Promise<StaticPath[]> {
  const draftModeEnabled = isDraftModeEnabled(Astro.cookies);
  const query = graphql(/* GraphQL */ `
    {
      allPosts {
        slug
      }
    }
  `);

  const { allPosts } = await executeQuery<{ allPosts: { slug: string }[] }>(query, {
    includeDrafts: draftModeEnabled,
  });

  return allPosts.map((post) => ({
    params: { slug: post.slug },
  }));
}


// Define the query to fetch post data
const query = graphql(
  /* GraphQL */ `
    query PostBySlug($slug: String!) {
      site: _site {
        favicon: faviconMetaTags {
          ...TagFragment
        }
      }
      post(filter: { slug: { eq: $slug } }) {
        seo: _seoMetaTags {
          ...TagFragment
        }
        title
        slug
        tags {
          name
          id
          slug
        }
        content {
          value
          blocks {
            ... on RecordInterface {
              id
              __typename
            }
            ... on ImageBlockRecord {
              ...ImageBlockFragment
            }
            ... on VideoBlockRecord {
              ...VideoBlockFragment
            }
          }
          links {
            __typename
            ... on PostRecord {
              id
              slug
              title
            }
            ... on CategoryRecord {
              id
              slug
              name
            }
          }
        }
        date
        coverImage {
          responsiveImage(imgixParams: { fm: jpg, fit: crop, w: 2000, h: 1000 }) {
            ...ResponsiveImageFragment
          }
        }
        category {
          name
          description
          slug
        }
      }
      morePosts: allPosts(orderBy: date_DESC, first: 2, filter: { slug: { neq: $slug } }) {
        title
        slug
        excerpt
        date
        coverImage {
          responsiveImage(imgixParams: { fm: jpg, fit: crop, w: 2000, h: 1000 }) {
            ...ResponsiveImageFragment
          }
        }
        category {
          name
          slug
        }
        tags {
          name
          slug
        }
      }
    }
  `,
  [
    TagFragment,
    ResponsiveImageFragment,
    ImageBlockFragment,
    VideoBlockFragment,
  ],
);
const draftModeEnabled = isDraftModeEnabled(Astro.cookies);
const { site, post } = await executeQuery(query, {   
  variables: { slug },
  includeDrafts: draftModeEnabled 
});


// If the post does not exist, return a 404 page
if (!post) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}

// Combine meta tags for SEO
const metaTags = [...post.seo, ...site.favicon];

// Sanitize the category description if necessary
const sanitizedCategoryDescription = post.category.description
  ? DOMPurify.sanitize(post.category.description)
  : null;
---

<Layout additionalSeo={metaTags}>
  <article>
    <PostHeader title={post.title} coverImage={post.coverImage} />
    <div class="mb-8 max-w-2xl mx-auto">
      <PostMeta category={post.category} date={post.date} tags={post.tags} />
    </div>

    <PostBody content={post.content} />
  </article>

  <hr />

  <CategoryAbstract
    name={post.category.name}
    description={sanitizedCategoryDescription}
    slug={post.category.slug}
  />
</Layout>
